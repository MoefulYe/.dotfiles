{ pkgs, ... }: 
let 
  chinaIpSources = {
    v4 = "https://hub.gitmirror.com/https://raw.githubusercontent.com/mayaxcn/china-ip-list/master/chnroute.txt";
    v6 = "https://hub.gitmirror.com/https://raw.githubusercontent.com/mayaxcn/china-ip-list/master/chnroute_v6.txt";
  };
in pkgs.writeShellScript "generate-china-ip-list" ''
  #!${pkgs.bash}/bin/bash
  set -e
  set -o pipefail # 管道中的任何一个命令失败，则整个管道失败

  # --- 配置区 ---
  # TODO: (来自开发者的注释)
  # 为了长期稳定性和安全性，这些 URL 应替换为一个多源下载重试的机制，
  # 或一个更可靠的、自建/官方的镜像源。
  # 当前直接使用社区镜像是为了部署便利，但存在单点故障风险。
  URL_IPV4="${chinaIpSources.v4}"
  URL_IPV6="${chinaIpSources.v6}"
  DIR=/var/lib/nftables-china-ips

  # nftables 集合的名称，这些名称必须与 nftables 规则中引用的名称一致
  NFT_SET_NAME_V4="china_ip_list_v4"
  NFT_SET_NAME_V6="china_ip_list_v6"

  # 最终生成的文件名 (这个文件会被 systemd 写入到 /var/lib/nftables-china-ips/)
  OUTPUT_NFT_FILE="china-ips.nft"

  # --- 辅助函数：获取 URL 内容并格式化为 nftables set 元素 ---
  # 使用 curl 下载内容，并通过 sed 在流中进行处理
  # 1. '/^$/d' -> 删除所有空行
  # 2. 's/$/,/' -> 在每行末尾添加一个逗号 (除了最后一行)
  # 3. '$ s/,$//' -> 删除最后一行的逗号 (由 awk 统一处理，更安全)
  # 使用函数，避免重复代码
  fetch_and_format_cidrs() {
    local url="$1"
    echo "[*] Fetching IP list from: $url" >&2
    # 使用 Nix Store 中的 curl 和 sed
    "${pkgs.curl}/bin/curl" -sSL --fail "$url" \
    | "${pkgs.gnused}/bin/sed" '/^$/d' \
    | "${pkgs.gawk}/bin/awk" '{printf "        %s,\n", $0}' # awk 更强大，处理逗号和缩进
  }

  echo "[+] Starting China IP list generation process..." >&2

  # --- 核心操作 ---
  # 1. 获取 IPv4 CIDRs 到内存变量
  IPV4_CIDRS=$(fetch_and_format_cidrs "$URL_IPV4")
  if [ -z "$IPV4_CIDRS" ]; then
    echo "[!] Error: Fetched IPv4 list is empty. Aborting." >&2
    exit 1
  fi
  # 移除 IPv4 列表末尾多余的逗号和换行
  IPV4_CIDRS=$(echo "$IPV4_CIDRS" | "${pkgs.gnused}/bin/sed" '$s/, *$//')


  # 2. 获取 IPv6 CIDRs 到内存变量
  IPV6_CIDRS=$(fetch_and_format_cidrs "$URL_IPV6")
  if [ -z "$IPV6_CIDRS" ]; then
    echo "[!] Error: Fetched IPv6 list is empty. Aborting." >&2
    exit 1
  fi
  # 移除 IPv6 列表末尾多余的逗号和换行
  IPV6_CIDRS=$(echo "$IPV6_CIDRS" | "${pkgs.gnused}/bin/sed" '$s/, *$//')


  # 3. 创建临时文件，写入最终的 nftables 配置
  #    (Atomic Write)
  TEMP_OUTPUT_FILE="$(mktemp "$DIR/temp-XXXXXX.nft")"
  trap "rm -f \"$TEMP_OUTPUT_FILE\"" EXIT # 确保临时文件被清理

  echo "[*] Formatting final nftables configuration file..." >&2

  # 使用 here-document 写入最终的 nftables set 定义
  cat > "$TEMP_OUTPUT_FILE" << EOF
  # ============================================================
  # This file is auto-generated by a script. DO NOT EDIT MANUALLY.
  # ============================================================
  set $NFT_SET_NAME_V4 {
      type ipv4_addr
      flags interval
      elements = {
  $IPV4_CIDRS
      }
  }
  
  set $NFT_SET_NAME_V6 {
      type ipv6_addr
      flags interval
      elements = {
  $IPV6_CIDRS
      }
  }
  EOF
  
  # 4. 原子性地替换旧文件
  echo "[*] Atomically replacing old IP list file..." >&2
  mv "$TEMP_OUTPUT_FILE" "$DIR/$OUTPUT_NFT_FILE"
  
  echo -e "\n[+] Success! Nftables set definitions written to '$DIR/$OUTPUT_NFT_FILE'" >&2
'';