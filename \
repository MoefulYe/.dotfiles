{
  lib,
  paths,
  config,
  ...
}:
let
  cfg = config.services.mihomo.presets.tproxy;
in
with lib;
{
  options.services.mihomo.presets.tproxy = {
    tproxyPort = mkOption {
      type = types.int;
      default = 7895;
    };
    routingMark = mkOption {
      type = types.int;
    };
    zjuConnect = {
      enable = mkEnableOption "enable zju connect";
      socks5Port = mkOption {
        type = types.int;
      };
    };
    logLevel = mkOption {
      type = types.str;
      default = "info";
    };
  };
  config = {
    services.mihomo = {
      enable = true;
      tunMode = true;
      configFile = config.sops.templates."mihomo.yaml".path;
      webui = pkgs.metacubexd;
    };
    sops.secrets = {
      MIHOMO_WEB_UI_PASSWD = {
        sopsFile = "${paths.secrets}/per-host/${hostInfo.hostname}/default.yaml";
      };
    };
  };
  sops.templates."mihomo.yaml".content =
    let
      intToString = builtins.toString;
      concat = builtins.concatStringsSep "";
      toYAML = lib.generators.toYAML { };
    in
    concat [
      ''
        # mihomo config file, generated by tproxy preset
        # Do not edit this file directly.
        # refernces: 
        #  - https://wiki.metacubex.one/handbook/
        #  - https://clash.wiki/
        #  - https://linux.do/t/topic/163682
        #  - https://linux.do/t/topic/832271
        #  - https://wiki.metacubex.one/example/conf/?h=geodata#__tabbed_1_3
        #  - https://clash-meta.gitbook.io/clash.meta-wiki-older
      ''
      ''
        #######################
        # mihomo basic config #
        #######################
        mode: rule
        ipv6: false
        tproxy-port: ${intToString cfg.tproxyPort}
        routing-mark: ${intToString cfg.routingMark}
        allow-lan: true
        log-level: ${cfg.logLevel}
        bind-address: "*"
        unified-delay: true
        tcp-concurrent: true
        external-controller: ":9090"
        secret: ${config.sops.placeholder.secret}
        profile:
          store-selected: true
          store-fake-ip: true
        global-client-fingerprint: random
        geodata-mode: true
        geox-url:
          geoip: "https://hub.gitmirror.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
          geosite: "https://hub.gitmirror.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
          mmdb: "https://hub.gitmirror.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb"
      ''
      ''
        ################################################
        # sniffer config                               #
        # ref: https://wiki.metacubex.one/config/sniff #
        ################################################
        sniffer:
          enable: true
          force-dns-mapping: false
          parse-pure-ip: true
          override-destination: false
          sniff:
            HTTP:
              ports: [80, 8080-8880]
              override-destination: true
            TLS:
              ports: [443, 8443]
            QUIC:
              ports: [443, 8443]
      ''
      (
        let
          yamls = builtins.attrValues (
            builtins.mapAttrs (provider: content: "  ${provider}: ${toYAML content}\n") proxy-providers
          );
        in
        ''
          ###########################################################
          # proxy-providers 代理提供方                              #
          # ref: https://wiki.metacubex.one/config/proxy-providers/ #
          ###########################################################
          proxy-providers:
          ${concat yamls}
        ''
      )
      (
        let
          yamls = builtins.attrValues (
            builtins.mapAttrs (provider: content: "  ${provider}: ${toYAML content}\n") rule-providers
          );
        in
        ''
          #########################################################
          # rule-providers 规则提供方                             #
          # ref: https://wiki.metacubex.one/config/rule-providers #
          #########################################################
          rule-providers:
          ${concat yamls}
        ''
      )
      (
        let
          yamls = builtins.map (proxy: "  - ${toYAML proxy}\n") proxies;
        in
        ''
          ###################################################
          # proxies 配置代理节点                            #
          # ref: https://wiki.metacubex.one/config/proxies/ #
          ###################################################
          proxies:
          ${concat yamls}
        ''
      )

      (
        let
          yamls = builtins.map (group: "  - ${toYAML group}\n") proxy-groups;
        in
        ''
          ########################################################
          # proxy-groups 配置代理组                              #
          # ref: https://wiki.metacubex.one/config/proxy-groups/ #
          ########################################################
          proxy-groups:
          ${concat yamls}
        ''
      )
      (
        let
          yamls = builtins.map (rule: "  - ${toYAML rule}\n") rules;
        in
        ''
          ################################################
          # rule 配置规则                                #
          # ref: https://wiki.metacubex.one/config/rules #
          ################################################
          rules:
          ${concat yamls}
        ''
      )
    ];
}
