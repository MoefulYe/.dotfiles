# 常量定义
define TPROXY_MARK=0x1
define MIHOMO_TPROXY_PORT=7895
define MIHOMO_DNS_PORT=7853

table inet mihomo-tproxy {
  # 集合定义
  set bypass-ipv4 {
    type ipv4_addr
    flags interval
    elements = {
      0.0.0.0/8,           # 本网络地址
      10.0.0.0/8,          # RFC 1918 私有地址
      100.64.0.0/10,       # RFC 6598 共享地址空间
      127.0.0.0/8,         # 回环地址
      169.254.0.0/16,      # RFC 3927 链路本地地址
      172.16.0.0/12,       # RFC 1918 私有地址
      192.168.0.0/16,      # RFC 1918 私有地址
      224.0.0.0/4,         # 组播地址
      240.0.0.0/4          # 保留地址
    }
  }

  set bypass-ipv6 {
    type ipv6_addr
    flags interval
    elements = {
      ::/128,              # 未指定地址
      ::1/128,             # 回环地址
      fc00::/7,            # RFC 4193 唯一本地地址
      fe80::/10,           # RFC 4291 链路本地地址
      ff00::/8             # 组播地址
    }
  }

  set bypass-tcp-ports {
    type inet_service
    elements = { 53, 67, 68, 123 }
  }

  set bypass-udp-ports {
    type inet_service
    elements = { 53, 67, 68, 123 }
  }

  set outbounds {
    type iface_index
    elements = { wlp128s20f3, enp131s0 }
  }

  set bypass-users {
    type uid
    elements = { mihomo, systemd-resolve }
  }

  # 给所有需要代理的流量打标记
  chain mark-prerouting {
    type filter hook prerouting priority mangle; policy accept;
    meta l4proto { tcp, udp } socket transparent 1 mark set $TPROXY_MARK return comment "mark already proxied traffic"
    socket transparent 0 socket wildcard 0 return comment "bypass non-transparent sockets"
    ip daddr @bypass-ipv4 return comment "bypass special IPv4 addresses"
    ip6 daddr @bypass-ipv6 return comment "bypass special IPv6 addresses"
    fib daddr type { local, broadcast, anycast, multicast } return comment "bypass local/broadcast/multicast addresses"
    # 入站流量：只关心目标端口
    tcp dport @bypass-tcp-ports return comment "bypass special ports"
    udp dport @bypass-udp-ports return comment "bypass special ports"
    meta l4proto { tcp, udp } tproxy to :$MIHOMO_TPROXY_PORT meta mark set $TPROXY_MARK return comment "redirect to tproxy port"
  }

  # 给所有需要代理的流量打标记
  chain mark-output {
    type route hook output priority mangle; policy accept;
    oif != @outbounds return comment "bypass internal traffic"
    meta skuid @bypass-users return comment "bypass mihomo and resolved traffic to prevent loops"
    # 出站流量：只关心源端口（本机发出的服务）
    tcp sport @bypass-tcp-ports return comment "bypass special ports"
    udp sport @bypass-udp-ports return comment "bypass special ports"
    meta l4proto { tcp, udp } meta mark set $TPROXY_MARK return comment "mark traffic for routing to prerouting chain"
  }

  # 重定向所有本机的dns请求到mihomo
  chain redirect-dns {
    type nat hook output priority dstnat; policy accept;
    meta skuid @bypass-users return comment "bypass mihomo and resolved dns request to prevent loops"
    tcp dport 53 redirect to :$MIHOMO_DNS_PORT comment "redirect outgoing DNS to mihomo"
    udp dport 53 redirect to :$MIHOMO_DNS_PORT comment "redirect outgoing DNS to mihomo"
  }
}
